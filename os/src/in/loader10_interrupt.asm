; Developed with assistance from DeepSeek AI for educational purposes in OS course slides
; Relocating Bootstrap Loader with INTERRUPTS
; Uses interrupt-driven I/O instead of polling

    ORG  0
    BUN  BOOT
    BUN  ISR
    ORG  100
BOOT, LDA  ZERO ;INIT
    STA  BASE_REGISTER
    STA  BYTES_LOADED
    STA  LOADING_FLAG
    STA  INP_BUFF
    STA  OUT_BUFF
    STA  SAVE_AC ;END
    LDA  ONE ;READ SIZE
    STA  LOADING_FLAG
    LDA  ZERO
    STA  PROG_SIZE
WAIT, LDA  PROG_SIZE
    SZA
    BUN  DONE
    BUN  WAIT
DONE, LDA  ZERO
    STA  LOADING_FLAG;END
    LDA  NEXT_FREE
    STA  BASE_REGISTER
    BSA  SET_INT_VEC
    BSA  LOAD_PROGRAM
    ION
    BSA  EXECUTE_PROGRAM
    BUN  100

ISR,STA  SAVE_AC
    SKI
    BUN  OUTPUT
    BSA  INPUT
    BUN  ISR_EXIT

OUTPUT, SKO
    BUN  UNKNOWN_INTERRUPT
    BSA  H_OUT_INT

UNKNOWN_INTERRUPT, ISR_EXIT,
    ION
    LDA  SAVE_AC
    BUN  100 

INPUT, HEX 0
    INP
    STA  INP_BUFF
    LDA  LOADING_FLAG
    SZA
    BUN  STORE2PROGRAM
    LDA  BASE_REGISTER
    ADD  PROG_INPUT_HANDLER
    STA  CALL_PTR
    BSA  CALL_PTR I
    BUN  INPUT I

STORE2PROGRAM, LDA INP_BUFF
    STA  LOAD_BUFFER
    BUN  INPUT I

H_OUT_INT, HEX 0
    LDA OUT_BUFF
    SZA
    BUN  SEND_OUTPUT
    LDA  BASE_REGISTER
    ADD  PROG_OUTPUT_HANDLER
    STA  CALL_PTR
    BSA  CALL_PTR I
    BUN  H_OUT_INT I

SEND_OUTPUT, LDA OUT_BUFF
    OUT
    LDA  ZERO
    STA  OUT_BUFF
    BUN  H_OUT_INT I

SET_INT_VEC, HEX 0
    LDA  BASE_REGISTER
    ADD  LOGICAL_INT_VEC
    STA  PHYS_INT_VEC
    LDA  BASE_REGISTER
    ADD  PROG_ISR
    STA  PHYS_INT_VEC I
    BUN  SET_INT_VEC I

LOAD_PROGRAM, HEX 0
    LDA  ONE
    STA  LOADING_FLAG
    LDA  ZERO
    STA  LOAD_INDEX
    STA  BYTES_LOADED

LOAD_LOOP, LDA  BYTES_LOADED
    SUB  PROG_SIZE
    SPA
    BUN  WAIT_FOR_BYTE
    BUN  LOAD_DONE

WAIT_FOR_BYTE, LDA LOAD_BUFFER
    SZA
    BUN  STORE_BYTE
    BUN  WAIT_FOR_BYTE

STORE_BYTE, LDA  BASE_REGISTER
    ADD  LOAD_INDEX
    STA  PHYS_ADDR
    LDA  LOAD_BUFFER
    STA  PHYS_ADDR I
    STA  LOAD_BUFFER
    LDA  LOAD_INDEX
    INC
    STA  LOAD_INDEX
    LDA  BYTES_LOADED
    INC
    STA  BYTES_LOADED
    BUN  LOAD_LOOP

LOAD_DONE, LDA     ZERO
    STA  LOADING_FLAG
    BUN  LOAD_PROGRAM I

EXECUTE_PROGRAM, HEX 0
    LDA  BASE_REGISTER
    STA  CALL_PTR
    BSA  CALL_PTR I
    BUN  EXECUTE_PROGRAM I

CALL_PTR,       HEX     0
NEXT_FREE,      HEX     500
BUFFER_SPACE,   DEC     50
STACK_PTR,      HEX     400
LOGICAL_INT_VEC,HEX     1
PROG_ISR,       HEX     50
PROG_INPUT_HANDLER, HEX 100
PROG_OUTPUT_HANDLER, HEX 120
ZERO,           DEC     0
ONE,            DEC     1
PROG_SIZE,      DEC     0
BASE_REGISTER,  DEC     0
BYTES_LOADED,   DEC     0
LOAD_INDEX,     DEC     0
LOADING_FLAG,   DEC     0
INP_BUFF,   DEC     0
OUT_BUFF,  DEC     0
LOAD_BUFFER,    DEC     0
SAVE_AC,        DEC     0
PHYS_ADDR,      HEX     0
PHYS_INT_VEC,   HEX     0
TEMP_ADDR,      HEX     0
    END
